import java.io.*;
import java.util.*;




public class FordFulkerson {

	
	public static ArrayList<Integer> pathDFS(Integer source, Integer destination, WGraph graph){
		ArrayList<Integer> Stack = new ArrayList<Integer>();
		LinkedList<Integer> queue = new LinkedList<Integer>();
		// YOUR CODE GOES HERE
		//Start at source, continue until you hit dest
		int n=graph.getNbNodes();
		int[] color = new int[graph.getNbNodes()];
		int[] parent = new int[graph.getNbNodes()];
		int time=0;
		int numDone=0;
		for(int i=0; i<color.length; i++)
			color[i]=0;	//Init all nodes to white
		queue.add(source);
		color[source]=1;	//Mark source visited
		parent[source]=-1;
		while(queue.size()!=0){
			int u = queue.poll();
			for(int v=0; v<n; v++){	//Go through all nodes
				if(color[v]==0 && graph.getEdge(u, v)!=null && graph.getEdge(u, v).weight>0){
					queue.add(v);
					parent[v]=u;
					color[v]=1;
				}
			}
		}
		if(color[destination]==0)	//Check if there is path
			return new ArrayList<Integer>(0);
		//Retrace to find the path
		System.out.println("Parent is "+Arrays.toString(parent));
		int curNode=destination;
		for(int i=0; i<parent.length-1; i++){			
			if(curNode==-1){	//Reached source
				break;
			}
			else{
				Stack.add(curNode);
				curNode=parent[curNode];				
			}			
		}
		 Collections.reverse(Stack);
		 return Stack;
		
	}
	
	public static void fordfulkerson(Integer source, Integer destination, WGraph graph, String filePath){
		String answer="";
		String myMcGillID = "260610696"; //Please initialize this variable with your McGill ID
		int maxFlow = 0;
		
			// YOUR CODE GOES HERE
		//Clone graph
		WGraph resG = new WGraph(graph);
		while(!pathDFS(source,destination,resG).isEmpty()){
			try {
				Thread.sleep(3000);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			System.out.println("resG is "+resG);
			ArrayList<Integer> path = pathDFS(source,destination,resG);
			System.out.println("Path is "+Arrays.toString(path.toArray()));
			int B=Integer.MAX_VALUE;
			for(int i=0; i<path.size()-1; i++){				
				int n0 = path.get(i);	//n0 is parent
				int n1 = path.get(i+1);	//n1 is child
				Edge e = resG.getEdge(n0, n1);
				B=Math.min(B, e.weight);				
			}
			//Update res cap of edges, reverse edges
			for(int i=0; i<path.size()-1; i++){
				int n0 = path.get(i);	//n0 is parent
				int n1 = path.get(i+1);	//n1 is child
				Edge e = resG.getEdge(n0,n1);
				resG.setEdge(n0, n1, e.weight-B);
				//Check if backward edge doesn't already exist
				if(resG.getEdge(n1, n0)==null){
					Edge newEdge = new Edge(n1, n0, 0);
					resG.addEdge(newEdge);
				}
				resG.setEdge(n1, n0, e.weight+B);
				
			}
			System.out.println("B is "+B);
			maxFlow+=B;
			
			//Check if getEdge() is null?
		}
		
		//Get the graph without the extra edges
		WGraph newGraph = new WGraph();
		ArrayList<Edge> resGEdges = resG.getEdges();
		for(Edge e: resGEdges){
			if(graph.getEdge(e.nodes[0], e.nodes[1]) !=null){
				newGraph.addEdge(e);
			}
		}
		graph=newGraph;
				
			//End Your code
		answer += maxFlow + "\n" + graph.toString();	
		writeAnswer(filePath+myMcGillID+".txt",answer);
		System.out.println(answer);
	}
	
	
	public static void writeAnswer(String path, String line){
		BufferedReader br = null;
		File file = new File(path);
		// if file doesnt exists, then create it
		
		try {
		if (!file.exists()) {
			file.createNewFile();
		}
		FileWriter fw = new FileWriter(file.getAbsoluteFile(),true);
		BufferedWriter bw = new BufferedWriter(fw);
		bw.write(line+"\n");	
		bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if (br != null)br.close();
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
	}
	
	 public static void main(String[] args){
		 //String file = args[0];
		 String file = "C:\\Users\\Alex\\Desktop\\Documents\\GitHub\\251_A3\\251_A3_Project\\src\\ff2.txt";
		 File f = new File(file);
		 WGraph g = new WGraph(file);	
		 //System.out.println(Arrays.toString(pathDFS(g.getSource(),g.getDestination(),g).toArray()));
		 fordfulkerson(g.getSource(),g.getDestination(),g,f.getAbsolutePath().replace(".txt",""));
	 }
}
